<document xmlns="http://cnx.rice.edu/cnxml">

<title>Plotting in MATLAB</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m41442</md:content-id>
  <md:title>Plotting in MATLAB</md:title>
  <md:abstract>Plotting basics.</md:abstract>
  <md:uuid>ec155d79-7e40-4435-a542-6667dfa6b373</md:uuid>
</metadata>

<content>
  <para id="eip-986"><media id="GraphingWithMATLAB" alt="GraphingWithMATLAB">
       
  <image mime-type="image/png" src="../../media/GraphingWithMATLAB.jpg"/>
         
</media>
</para><para id="delete_me">A picture is worth a thousand words, particularly visual representation of data in engineering is very useful. MATLAB has powerful graphics tools and there is a very helpful section devoted to graphics in MATLAB Help: Graphics. Students are encouraged to study that section; what follows is a brief summary of the main plotting features. </para><section id="eip-905"><title>Two-Dimensional Plots</title><section id="eip-349"><title>The <code>plot</code> Statement</title><para id="eip-747">Probably the most common method for creating a plot is by issuing <code>plot(x, y)</code> statement where function y is plotted against x.</para><example id="eip-163"><para id="eip-3">Type in the following statement at the MATLAB prompt: </para><code id="eip-372" display="block">x=[-pi:.1:pi]; y=sin(x); plot(x,y);</code><para id="eip-39">After we executed the statement above, a plot named Figure1 is generated:</para><para id="eip-176"><figure id="Plot"><media id="Plot1" alt="Plot">
       
  <image mime-type="image/png" src="../../media/sinx.png"/>
         
</media>
  
<caption>Graph of sin(x)
  </caption></figure></para>
</example><para id="eip-548">Having variables assigned in the Workspace, x and y=sin(x) in our case, we can also select x and y, and right click on the selected variables. This opens a menu from which we choose plot(x,y). See the figure below.</para><para id="eip-367"><figure id="PlotFromWorkspace"><media id="PlotFromWorkspace1" alt="PlotFromWorkspace">
       
  <image mime-type="image/png" src="../../media/PlotFromWorkspace.PNG"/>
         
</media>
  
<caption>Creating a plot from Workspace.
  </caption></figure></para></section><section id="eip-170"><title>Annotating Plots</title><para id="eip-620">Graphs without labels are incomplete and labeling elements such as plot title, labels for x and y axes, and legend should be included. Using up arrow, recall the statement above and add the annotation commands as shown below.
</para><code id="eip-290" display="block">x=[-pi:.1:pi];y=sin(x);plot(x,y);title('Graph of y=sin(x)');xlabel('x');ylabel('sin(x)');grid on</code><para id="eip-313">Run the file and compare your result with the first one.</para><para id="eip-959"><figure id="sinxLabels">
<media id="sinxLabels1" alt="sinxLabels">
       
  <image mime-type="image/png" src="../../media/sinxLabels.png"/>
         
</media>
  <caption>
     Graph of sin(x) with Labels.
  </caption>
</figure></para><note id="eip-621" type="aside">Type in the following at the MATLAB prompt and learn additional commands to annotate plots:
<code id="eip-id1164733136309" display="block">
help gtext
help legend
help zlabel
</code></note></section><section id="eip-868"><title>Superimposed Plots</title><para id="eip-293">If you want to merge data from two graphs, rather than create a new graph from scratch, you can superimpose the two using a simple trick:
</para><code id="eip-998" display="block">% This script generates sin(x) and cos(x) plot on the same graph
% initialize variables
x=[-pi:.1:pi];      %create a row vector from -pi to +pi with .1 increments
y0=sin(x);          %calculate sine value for each x
y1=cos(x);          %calculate cosine value for each x
% Plot sin(x) and cos(x) on the same graph
plot(x,y0,x,y1);
title('Graph of sin(x) and cos(x)'); %Title of graph
xlabel('x');                %Label of x axis
ylabel('sin(x), cos(x)');   %Label of y axis
legend('sin(x)','cos(x)');  %Insert legend in the same order as y0 and y1 calculated
grid on                     %Graph grid is turned</code><para id="eip-75"><figure id="sinxLabelsLegend">
<media id="sinxLabelsLegend1" alt="sinxLabelsLegend">
       
  <image mime-type="image/png" src="../../media/sinxLabelsLegend.png"/>
         
</media>
  <caption>
     Graph of sin(x) and cos(x) in the same plot with labels and legend.
  </caption>
</figure></para></section><section id="eip-954"><title>Multiple Plots in a Figure</title><para id="eip-399">Multiple plots in a single figure can be generated with <code>subplot</code> in the Command Window. However, this time we will use the built-in Plot Tools. Before we initialize that tool set, let us create the necessary variables using the following script: </para><code id="eip-645" display="block">% This script generates sin(x) and cos(x) variables
clc                 %Clears command window
clear all           %Clears the variable space
close all           %Closes all figures
X1=[-2*pi:.1:2*pi];  %Creates a row vector from -2*pi to 2*pi with .1 increments
Y1=sin(X1);          %Calculates sine value for each x
Y2=cos(X1);          %Calculates cosine value for each x
Y3=Y1+Y2;            %Calculates sin(x)+cos(x)
Y4=Y1-Y2;            %Calculates sin(x)-cos(x)
</code><para id="eip-88">Note that the above script clears the command window and variable workspace. It also closes any open Figures. After running the script, we will have X1, Y1, Y2, Y3 and Y4 loaded in the workspace. Next, select File &gt; New &gt; Figure, a new Figure window will open. Click "Show Plot Tools and Dock Figure" on the tool bar.</para><para id="eip-444"><figure id="PlotTools"><media id="PlotTools1" alt="PlotTools">
       
  <image mime-type="image/png" src="../../media/PlotTools.png"/>
         
</media>
  
<caption>Plot Tools
  </caption></figure>
</para><para id="eip-459">Under New Subplots &gt; 2D Axes, select four vertical boxes that will create four subplots in one figure. Also notice, the five variables we created earlier are listed under Variables.</para><para id="eip-239"><figure id="PlotTools2"><media id="PlotTools3" alt="Plot Tools">
       
  <image mime-type="image/png" src="../../media/PlotTools1.png"/>
         
</media>
  
<caption>Creating four sub plots.
  </caption></figure>
</para><para id="eip-340">After the subplots have been created, select the first supblot and click on "Add Data". In the dialog box, set X Data Source to X1 and Y Data Source to Y1. Repeat this step for the remaining subplots paying attention to Y Data Source (Y2, Y3 and Y4 need to be selected in the subsequent steps while X1 is always the X Data Source).
</para><para id="eip-364"><figure id="PlotTools4"><media id="PlotTools5" alt="PlotTools">
       
  <image mime-type="image/png" src="../../media/PlotTools2.png"/>
         
</media>
  
<caption>Adding data to axes.
  </caption></figure>
</para><para id="eip-11">Next, select the first item in "Plot Browser" and activate the "Property Editor". Fill out the fields as shown in the figure below. Repeat this step for all subplots.</para><para id="eip-907"><figure id="PlotTools6"><media id="PlotTools7" alt="PlotTools">
       
  <image mime-type="image/png" src="../../media/PlotTools3.png"/>
         
</media>
  
<caption>Using "Property Editor".
  </caption></figure>
</para><para id="eip-553">Save the figure as <code>sinxcosx.fig</code> in the current directory.</para><para id="eip-545"><figure id="PlotTools8"><media id="PlotTools9" alt="PlotTools">
       
  <image mime-type="image/png" src="../../media/PlotTools4.png"/>
         
</media>
  
<caption>The four subplots generated with "Plot Tools".
  </caption></figure>
</para><para id="eip-435"><figure id="SubPlot"><media id="SubPlot1" alt="SubPlot">
       
  <image mime-type="image/png" src="../../media/subplot0.png"/>
         
</media>
  
<caption>The four subplots in a single figure.
  </caption></figure></para></section></section><section id="eip-470"><title>Three-Dimensional Plots</title><para id="eip-94">3D plots can be generated from the Command Window as well as by GUI alternatives. This time, we will go back to the Command Window.
</para><section id="eip-442"><title>The <code>plot3</code> Statement</title><para id="eip-481">With the X1,Y1,Y2 and Y2 variables still in the workspace, type in <code>plot3(X1,Y1,Y2)</code> at the MATLAB prompt. A figure will be generated, click "Show Plot Tools and Dock Figure".
</para><para id="eip-945"><figure id="Plot3D"><media id="Plot3d1" alt="Plot">
       
  <image mime-type="image/png" src="../../media/Plot3D.png"/>
         
</media>
  
<caption>A raw 3D figure is generated with <code>plot3</code>.
  </caption></figure>
</para><para id="eip-673">Use the property editor to make the following changes.</para><para id="eip-849"><figure id="Plot3D1"><media id="Plot3d2" alt="Plot">
       
  <image mime-type="image/png" src="../../media/Plot3D1.png"/>
         
</media>
  
<caption>3D Property Editor.
  </caption></figure></para><para id="eip-692">The final result should look like this:</para><para id="eip-997"><figure id="Plot3D2"><media id="Plot3d3" alt="Plot">
       
  <image mime-type="image/png" src="../../media/Plot3D2.png"/>
         
</media>
  
<caption>3D graph of x, sin(x), cos(x)
  </caption></figure></para></section><para id="eip-374">Use <code>help</code> or <code>doc</code> commands to learn more about 3D plots, for example, <code>image(x)</code>, <code>surf(x)</code> and <code>mesh(x)</code>.</para></section><section id="eip-918"><title>Quiver or Velocity Plots</title><para id="eip-418">To plot vectors, it is useful to draw arrows so that the direction of the arrow points the direction of the vector and the length of the arrow is vectorâ€™s magnitude. However the standard plot function is not suitable for this purpose. Fortunately, MATLAB has <code>quiver</code> function appropriately named to plot arrows. 
<code>quiver(x,y,u,v)</code> plots vectors as arrows at the coordinates (x,y) with components (u,v). The matrices x, y, u, and v must all be the same size and contain corresponding position and velocity components.

</para><example id="eip-186"><para id="eip-937">Calculate the magnitude of forces OA, OB and the resultant R of OA and OB shown below. Plot all three forces on x-y Cartesian coordinate system<footnote id=" AppliedEngineeringMechanics ">
    <cite>
  <cite-title>Applied Engineering Mechanics</cite-title>
  by  A. Jensen, H. Chenoweth McGraw-Hill Ryerson Limited  Â© 1972, (p. 15)
</cite>
  </footnote>.
<figure id="Resultant1"><media id="Resultant1_id" alt="Resultant1">
       
  <image mime-type="image/jpeg" src="../../media/Resultant1.jpg"/>
         
</media>
  
<caption>Quiver Plot.
  </caption></figure></para><code id="eip-289" display="block">% Preparation
clear   % removes all variables from the current workspace, 
        % releasing them from system memory.
clc     % clears all input and output from the Command Window display, 
        % giving you a "clean screen."
% Input and Computation
OA=[600 320];    % Force 1
magOA=sqrt(sum(OA.^2));
OB=[-200 -480];  % Force 2
magOB=sqrt(sum(OB.^2));
OC=OA+OB;        % The resultant of OA and OB
magOC=sqrt(sum(OC.^2)); % The magnitude of resultant force OC
angleMag=atan(OC(2)/OC(1))*180/pi; % angle of OC in degrees
% Output
disp(' ')                     % Display blank line
str1= ['The magnitude of the resultant force is ', num2str(magOC), ' N.'];
disp(str1); 
str2= ['The angle of the resultant force is ', num2str(angleMag), ' degrees.'];
disp(str2); 
% Plot Preparation
starts = zeros(3,2); % Origin for all 3 forces, 3x2 "zero" matrix
ends = [OA;OB;OC]; % End point for all 3 forces
vectors = horzcat(starts,ends); % Concatenate arrays horizontally
% Plot Forces on x-y Cartesian Coordinate System
% The following MATLAB function plots vectors as arrows 
% at the coordinates specified in each corresponding 
% pair of elements in x and y.
quiver( vectors( :,1 ), vectors( :,2 ), vectors( :,3 ), vectors( :,4 )); 
axis equal
grid
title('Forces on x-y Cartesian Coordinate System')
xlabel('x') % x-axis label
ylabel('y') % y-axis label
view(2) % setting view to 2-D</code><para id="eip-730"><figure id="Resultant1a"><media id="Resultant1a_" alt="Resultant1_Plot">
       
  <image mime-type="image/jpeg" src="../../media/Resultant1a.jpg"/>
         
</media>
  
<caption>Output of <code>quiver</code> function.
  </caption></figure></para></example><example id="eip-450"><para id="eip-33">Write an interactive script to calculate the resultant R of forces F1, F2 and F3 shown below and plot all four forces on x-y Cartesian coordinate system<footnote id=" AppliedEngineeringMechanics1 ">
    <cite>
  <cite-title>Applied Engineering Mechanics</cite-title>
  by  A. Jensen, H. Chenoweth McGraw-Hill Ryerson Limited  Â© 1972, (p. 15)
</cite>
  </footnote>.
<figure id="resultantR"><media id="resultantR1" alt="resultant of  3 forces">
       
  <image mime-type="image/jpeg" src="../../media/Resultant2.jpg"/>
         
</media>
  
<caption>An example for quiver3 plot.
  </caption></figure>

</para><code id="eip-687" display="block">clear
clc
disp('This script computes the resultant of three forces on x-y Cartesian coordinate system.')
f1=input('Enter the magnitude of first force in N: ');                                     
theta1=input('Enter the angle of first force in deg: ');
f2=input('Enter the magnitude of second force in N: ');                                     
theta2=input('Enter the angle of second force in deg: ');
f3=input('Enter the magnitude of third force in N: ');                                     
theta3=input('Enter the angle of third force in deg: ');
x1=f1*cos(theta1*pi/180); % The components of force
y1=f1*sin(theta1*pi/180); % The components of force
F1=[x1 y1];  % Force 1
x2=f2*cos(theta2*pi/180); % The components of force
y2=f2*sin(theta2*pi/180); % The components of force
F2=[x2 y2];  % Force 2
x3=f3*cos(theta3*pi/180); % The components of force
y3=f3*sin(theta3*pi/180); % The components of force
F3=[x3 y3];  % Force 3
R=F1+F2+F3;  % The resultant of F1, F2 and F3
magR=sqrt(sum(R.^2)); % The magnitude of resultant force R
angle=atan(R(2)/R(1))*180/pi; % Angle of R in degrees
disp(' ')                     % Display blank line
str1= ['The magnitude of the resultant force is ', num2str(magR), ' N.'];
disp(str1); 
str2= ['The angle of the resultant force is ', num2str(angle), ' degrees.'];
disp(str2); 
starts = zeros(4,3);
ends = [F1;F2;F3;R];
ends(3,3)=0; % inputs 0s for z components, making it 3D
vectors = horzcat(starts,ends); % Concatenate arrays horizontally
quiver3( vectors( :,1 ), vectors( :,2 ), vectors( :,3 ), vectors( :,4 ), vectors( :,5 ), vectors( :,6 )); % A three-dimensional quiver plot displays vectors with components (u,v,w) at the points (x,y,z), where u, v, w, x, y, and z all have real (non-complex) values.
axis equal
title('Forces on x-y Cartesian coordinate system')
xlabel('x') % x-axis label
ylabel('y') % y-axis label
view(2)</code><para id="eip-935"><figure id="quiver3Ex"><media id="quiver3ExA" alt="quiver3 Example">
       
  <image mime-type="image/jpeg" src="../../media/Resultant3.jpg"/>
         
</media>
  
<caption>Output of <code>quiver3</code> function.
  </caption></figure></para><code id="eip-607" display="block"/></example></section><section id="eip-188"><title>Summary of Key Points</title><list id="eip-151" list-type="enumerated" number-style="arabic"><item><code>plot(x, y)</code> and <code>plot3(X1,Y1,Y2)</code> statements create 2- and 3-D graphs respectively,</item>
<item>Plots at minimum should contain the following elements: <code>title</code>, <code>xlabel</code>, <code>ylabel</code> and <code>legend</code>,</item>
<item>Annotated plots can be easily generated with GUI Plot Tools,</item>
<item><code>quiver</code> and <code>quiver3</code> plots are useful for making vector diagrams.</item></list></section>
</content>

</document>